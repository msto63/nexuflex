// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.30.0
// source: nexuflex.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	NexuflexService_Discover_FullMethodName                = "/nexuflex.NexuflexService/Discover"
	NexuflexService_Connect_FullMethodName                 = "/nexuflex.NexuflexService/Connect"
	NexuflexService_Login_FullMethodName                   = "/nexuflex.NexuflexService/Login"
	NexuflexService_Logout_FullMethodName                  = "/nexuflex.NexuflexService/Logout"
	NexuflexService_KeepAlive_FullMethodName               = "/nexuflex.NexuflexService/KeepAlive"
	NexuflexService_ExecuteCommand_FullMethodName          = "/nexuflex.NexuflexService/ExecuteCommand"
	NexuflexService_ExecuteStreamingCommand_FullMethodName = "/nexuflex.NexuflexService/ExecuteStreamingCommand"
	NexuflexService_GetAvailableServices_FullMethodName    = "/nexuflex.NexuflexService/GetAvailableServices"
	NexuflexService_GetServiceCommands_FullMethodName      = "/nexuflex.NexuflexService/GetServiceCommands"
	NexuflexService_GetCommandHelp_FullMethodName          = "/nexuflex.NexuflexService/GetCommandHelp"
	NexuflexService_AutoComplete_FullMethodName            = "/nexuflex.NexuflexService/AutoComplete"
	NexuflexService_GetAliases_FullMethodName              = "/nexuflex.NexuflexService/GetAliases"
	NexuflexService_CreateAlias_FullMethodName             = "/nexuflex.NexuflexService/CreateAlias"
	NexuflexService_DeleteAlias_FullMethodName             = "/nexuflex.NexuflexService/DeleteAlias"
)

// NexuflexServiceClient is the client API for NexuflexService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// NexuflexService defines the generic interface between client and application server
type NexuflexServiceClient interface {
	// System functions
	Discover(ctx context.Context, in *DiscoverRequest, opts ...grpc.CallOption) (*DiscoverResponse, error)
	Connect(ctx context.Context, in *ConnectRequest, opts ...grpc.CallOption) (*ConnectResponse, error)
	Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginResponse, error)
	Logout(ctx context.Context, in *LogoutRequest, opts ...grpc.CallOption) (*LogoutResponse, error)
	KeepAlive(ctx context.Context, in *KeepAliveRequest, opts ...grpc.CallOption) (*KeepAliveResponse, error)
	// Main function for all commands
	ExecuteCommand(ctx context.Context, in *CommandRequest, opts ...grpc.CallOption) (*CommandResponse, error)
	// Streaming functions for long-running operations
	ExecuteStreamingCommand(ctx context.Context, in *CommandRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[CommandOutput], error)
	// Helper functions
	GetAvailableServices(ctx context.Context, in *ServicesRequest, opts ...grpc.CallOption) (*ServicesResponse, error)
	GetServiceCommands(ctx context.Context, in *ServiceCommandsRequest, opts ...grpc.CallOption) (*ServiceCommandsResponse, error)
	GetCommandHelp(ctx context.Context, in *CommandHelpRequest, opts ...grpc.CallOption) (*CommandHelpResponse, error)
	AutoComplete(ctx context.Context, in *AutoCompleteRequest, opts ...grpc.CallOption) (*AutoCompleteResponse, error)
	// Alias management
	GetAliases(ctx context.Context, in *GetAliasesRequest, opts ...grpc.CallOption) (*GetAliasesResponse, error)
	CreateAlias(ctx context.Context, in *CreateAliasRequest, opts ...grpc.CallOption) (*CreateAliasResponse, error)
	DeleteAlias(ctx context.Context, in *DeleteAliasRequest, opts ...grpc.CallOption) (*DeleteAliasResponse, error)
}

type nexuflexServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewNexuflexServiceClient(cc grpc.ClientConnInterface) NexuflexServiceClient {
	return &nexuflexServiceClient{cc}
}

func (c *nexuflexServiceClient) Discover(ctx context.Context, in *DiscoverRequest, opts ...grpc.CallOption) (*DiscoverResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DiscoverResponse)
	err := c.cc.Invoke(ctx, NexuflexService_Discover_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nexuflexServiceClient) Connect(ctx context.Context, in *ConnectRequest, opts ...grpc.CallOption) (*ConnectResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ConnectResponse)
	err := c.cc.Invoke(ctx, NexuflexService_Connect_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nexuflexServiceClient) Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LoginResponse)
	err := c.cc.Invoke(ctx, NexuflexService_Login_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nexuflexServiceClient) Logout(ctx context.Context, in *LogoutRequest, opts ...grpc.CallOption) (*LogoutResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LogoutResponse)
	err := c.cc.Invoke(ctx, NexuflexService_Logout_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nexuflexServiceClient) KeepAlive(ctx context.Context, in *KeepAliveRequest, opts ...grpc.CallOption) (*KeepAliveResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(KeepAliveResponse)
	err := c.cc.Invoke(ctx, NexuflexService_KeepAlive_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nexuflexServiceClient) ExecuteCommand(ctx context.Context, in *CommandRequest, opts ...grpc.CallOption) (*CommandResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CommandResponse)
	err := c.cc.Invoke(ctx, NexuflexService_ExecuteCommand_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nexuflexServiceClient) ExecuteStreamingCommand(ctx context.Context, in *CommandRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[CommandOutput], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &NexuflexService_ServiceDesc.Streams[0], NexuflexService_ExecuteStreamingCommand_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[CommandRequest, CommandOutput]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type NexuflexService_ExecuteStreamingCommandClient = grpc.ServerStreamingClient[CommandOutput]

func (c *nexuflexServiceClient) GetAvailableServices(ctx context.Context, in *ServicesRequest, opts ...grpc.CallOption) (*ServicesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ServicesResponse)
	err := c.cc.Invoke(ctx, NexuflexService_GetAvailableServices_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nexuflexServiceClient) GetServiceCommands(ctx context.Context, in *ServiceCommandsRequest, opts ...grpc.CallOption) (*ServiceCommandsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ServiceCommandsResponse)
	err := c.cc.Invoke(ctx, NexuflexService_GetServiceCommands_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nexuflexServiceClient) GetCommandHelp(ctx context.Context, in *CommandHelpRequest, opts ...grpc.CallOption) (*CommandHelpResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CommandHelpResponse)
	err := c.cc.Invoke(ctx, NexuflexService_GetCommandHelp_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nexuflexServiceClient) AutoComplete(ctx context.Context, in *AutoCompleteRequest, opts ...grpc.CallOption) (*AutoCompleteResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AutoCompleteResponse)
	err := c.cc.Invoke(ctx, NexuflexService_AutoComplete_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nexuflexServiceClient) GetAliases(ctx context.Context, in *GetAliasesRequest, opts ...grpc.CallOption) (*GetAliasesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAliasesResponse)
	err := c.cc.Invoke(ctx, NexuflexService_GetAliases_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nexuflexServiceClient) CreateAlias(ctx context.Context, in *CreateAliasRequest, opts ...grpc.CallOption) (*CreateAliasResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateAliasResponse)
	err := c.cc.Invoke(ctx, NexuflexService_CreateAlias_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nexuflexServiceClient) DeleteAlias(ctx context.Context, in *DeleteAliasRequest, opts ...grpc.CallOption) (*DeleteAliasResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteAliasResponse)
	err := c.cc.Invoke(ctx, NexuflexService_DeleteAlias_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NexuflexServiceServer is the server API for NexuflexService service.
// All implementations must embed UnimplementedNexuflexServiceServer
// for forward compatibility.
//
// NexuflexService defines the generic interface between client and application server
type NexuflexServiceServer interface {
	// System functions
	Discover(context.Context, *DiscoverRequest) (*DiscoverResponse, error)
	Connect(context.Context, *ConnectRequest) (*ConnectResponse, error)
	Login(context.Context, *LoginRequest) (*LoginResponse, error)
	Logout(context.Context, *LogoutRequest) (*LogoutResponse, error)
	KeepAlive(context.Context, *KeepAliveRequest) (*KeepAliveResponse, error)
	// Main function for all commands
	ExecuteCommand(context.Context, *CommandRequest) (*CommandResponse, error)
	// Streaming functions for long-running operations
	ExecuteStreamingCommand(*CommandRequest, grpc.ServerStreamingServer[CommandOutput]) error
	// Helper functions
	GetAvailableServices(context.Context, *ServicesRequest) (*ServicesResponse, error)
	GetServiceCommands(context.Context, *ServiceCommandsRequest) (*ServiceCommandsResponse, error)
	GetCommandHelp(context.Context, *CommandHelpRequest) (*CommandHelpResponse, error)
	AutoComplete(context.Context, *AutoCompleteRequest) (*AutoCompleteResponse, error)
	// Alias management
	GetAliases(context.Context, *GetAliasesRequest) (*GetAliasesResponse, error)
	CreateAlias(context.Context, *CreateAliasRequest) (*CreateAliasResponse, error)
	DeleteAlias(context.Context, *DeleteAliasRequest) (*DeleteAliasResponse, error)
	mustEmbedUnimplementedNexuflexServiceServer()
}

// UnimplementedNexuflexServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedNexuflexServiceServer struct{}

func (UnimplementedNexuflexServiceServer) Discover(context.Context, *DiscoverRequest) (*DiscoverResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Discover not implemented")
}
func (UnimplementedNexuflexServiceServer) Connect(context.Context, *ConnectRequest) (*ConnectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Connect not implemented")
}
func (UnimplementedNexuflexServiceServer) Login(context.Context, *LoginRequest) (*LoginResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Login not implemented")
}
func (UnimplementedNexuflexServiceServer) Logout(context.Context, *LogoutRequest) (*LogoutResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Logout not implemented")
}
func (UnimplementedNexuflexServiceServer) KeepAlive(context.Context, *KeepAliveRequest) (*KeepAliveResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method KeepAlive not implemented")
}
func (UnimplementedNexuflexServiceServer) ExecuteCommand(context.Context, *CommandRequest) (*CommandResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExecuteCommand not implemented")
}
func (UnimplementedNexuflexServiceServer) ExecuteStreamingCommand(*CommandRequest, grpc.ServerStreamingServer[CommandOutput]) error {
	return status.Errorf(codes.Unimplemented, "method ExecuteStreamingCommand not implemented")
}
func (UnimplementedNexuflexServiceServer) GetAvailableServices(context.Context, *ServicesRequest) (*ServicesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAvailableServices not implemented")
}
func (UnimplementedNexuflexServiceServer) GetServiceCommands(context.Context, *ServiceCommandsRequest) (*ServiceCommandsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetServiceCommands not implemented")
}
func (UnimplementedNexuflexServiceServer) GetCommandHelp(context.Context, *CommandHelpRequest) (*CommandHelpResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCommandHelp not implemented")
}
func (UnimplementedNexuflexServiceServer) AutoComplete(context.Context, *AutoCompleteRequest) (*AutoCompleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AutoComplete not implemented")
}
func (UnimplementedNexuflexServiceServer) GetAliases(context.Context, *GetAliasesRequest) (*GetAliasesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAliases not implemented")
}
func (UnimplementedNexuflexServiceServer) CreateAlias(context.Context, *CreateAliasRequest) (*CreateAliasResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAlias not implemented")
}
func (UnimplementedNexuflexServiceServer) DeleteAlias(context.Context, *DeleteAliasRequest) (*DeleteAliasResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAlias not implemented")
}
func (UnimplementedNexuflexServiceServer) mustEmbedUnimplementedNexuflexServiceServer() {}
func (UnimplementedNexuflexServiceServer) testEmbeddedByValue()                         {}

// UnsafeNexuflexServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NexuflexServiceServer will
// result in compilation errors.
type UnsafeNexuflexServiceServer interface {
	mustEmbedUnimplementedNexuflexServiceServer()
}

func RegisterNexuflexServiceServer(s grpc.ServiceRegistrar, srv NexuflexServiceServer) {
	// If the following call pancis, it indicates UnimplementedNexuflexServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&NexuflexService_ServiceDesc, srv)
}

func _NexuflexService_Discover_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DiscoverRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NexuflexServiceServer).Discover(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NexuflexService_Discover_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NexuflexServiceServer).Discover(ctx, req.(*DiscoverRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NexuflexService_Connect_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConnectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NexuflexServiceServer).Connect(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NexuflexService_Connect_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NexuflexServiceServer).Connect(ctx, req.(*ConnectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NexuflexService_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NexuflexServiceServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NexuflexService_Login_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NexuflexServiceServer).Login(ctx, req.(*LoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NexuflexService_Logout_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LogoutRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NexuflexServiceServer).Logout(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NexuflexService_Logout_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NexuflexServiceServer).Logout(ctx, req.(*LogoutRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NexuflexService_KeepAlive_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KeepAliveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NexuflexServiceServer).KeepAlive(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NexuflexService_KeepAlive_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NexuflexServiceServer).KeepAlive(ctx, req.(*KeepAliveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NexuflexService_ExecuteCommand_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommandRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NexuflexServiceServer).ExecuteCommand(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NexuflexService_ExecuteCommand_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NexuflexServiceServer).ExecuteCommand(ctx, req.(*CommandRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NexuflexService_ExecuteStreamingCommand_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(CommandRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(NexuflexServiceServer).ExecuteStreamingCommand(m, &grpc.GenericServerStream[CommandRequest, CommandOutput]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type NexuflexService_ExecuteStreamingCommandServer = grpc.ServerStreamingServer[CommandOutput]

func _NexuflexService_GetAvailableServices_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ServicesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NexuflexServiceServer).GetAvailableServices(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NexuflexService_GetAvailableServices_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NexuflexServiceServer).GetAvailableServices(ctx, req.(*ServicesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NexuflexService_GetServiceCommands_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ServiceCommandsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NexuflexServiceServer).GetServiceCommands(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NexuflexService_GetServiceCommands_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NexuflexServiceServer).GetServiceCommands(ctx, req.(*ServiceCommandsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NexuflexService_GetCommandHelp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommandHelpRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NexuflexServiceServer).GetCommandHelp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NexuflexService_GetCommandHelp_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NexuflexServiceServer).GetCommandHelp(ctx, req.(*CommandHelpRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NexuflexService_AutoComplete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AutoCompleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NexuflexServiceServer).AutoComplete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NexuflexService_AutoComplete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NexuflexServiceServer).AutoComplete(ctx, req.(*AutoCompleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NexuflexService_GetAliases_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAliasesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NexuflexServiceServer).GetAliases(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NexuflexService_GetAliases_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NexuflexServiceServer).GetAliases(ctx, req.(*GetAliasesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NexuflexService_CreateAlias_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAliasRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NexuflexServiceServer).CreateAlias(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NexuflexService_CreateAlias_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NexuflexServiceServer).CreateAlias(ctx, req.(*CreateAliasRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NexuflexService_DeleteAlias_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAliasRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NexuflexServiceServer).DeleteAlias(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NexuflexService_DeleteAlias_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NexuflexServiceServer).DeleteAlias(ctx, req.(*DeleteAliasRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// NexuflexService_ServiceDesc is the grpc.ServiceDesc for NexuflexService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var NexuflexService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "nexuflex.NexuflexService",
	HandlerType: (*NexuflexServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Discover",
			Handler:    _NexuflexService_Discover_Handler,
		},
		{
			MethodName: "Connect",
			Handler:    _NexuflexService_Connect_Handler,
		},
		{
			MethodName: "Login",
			Handler:    _NexuflexService_Login_Handler,
		},
		{
			MethodName: "Logout",
			Handler:    _NexuflexService_Logout_Handler,
		},
		{
			MethodName: "KeepAlive",
			Handler:    _NexuflexService_KeepAlive_Handler,
		},
		{
			MethodName: "ExecuteCommand",
			Handler:    _NexuflexService_ExecuteCommand_Handler,
		},
		{
			MethodName: "GetAvailableServices",
			Handler:    _NexuflexService_GetAvailableServices_Handler,
		},
		{
			MethodName: "GetServiceCommands",
			Handler:    _NexuflexService_GetServiceCommands_Handler,
		},
		{
			MethodName: "GetCommandHelp",
			Handler:    _NexuflexService_GetCommandHelp_Handler,
		},
		{
			MethodName: "AutoComplete",
			Handler:    _NexuflexService_AutoComplete_Handler,
		},
		{
			MethodName: "GetAliases",
			Handler:    _NexuflexService_GetAliases_Handler,
		},
		{
			MethodName: "CreateAlias",
			Handler:    _NexuflexService_CreateAlias_Handler,
		},
		{
			MethodName: "DeleteAlias",
			Handler:    _NexuflexService_DeleteAlias_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ExecuteStreamingCommand",
			Handler:       _NexuflexService_ExecuteStreamingCommand_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "nexuflex.proto",
}
